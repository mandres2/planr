{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SignedOutLinks","state","console","log","firebase","links","uid","isLoaded","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","project","title","authorFirstName","authorLastName","createdAt","toDateString","ProjectList","projects","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","style","color","SignedIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","CreateProject","createProject","history","push","authorId","add","Date","App","exact","path","component","ProjectDetails","SignIn","Boolean","window","location","hostname","initState","authReducer","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","rrfProps","config","userProfile","useFirestoreForProfile","createFirestoreInstance","presence","sessions","AuthIsLoaded","children","useSelector","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.e9337f30.chunk.js","sourcesContent":["import React, { Profiler } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { signOut } from '../../store/actions/authActions'\r\n\r\nconst SignedInLinks = (props) => {\r\n    return (\r\n        <ul className=\"right\">\r\n            <li><NavLink to='/create'>NewProject</NavLink></li>\r\n            <li><a onClick={props.signOut}>Log Out</a></li>\r\n            <li><NavLink to='/' className='btn btn-floating deep-orange lighten-2'>\r\n            {props.profile.initials}\r\n            </NavLink></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signOut: () => dispatch(signOut())\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SignedInLinks);","export const signIn = (credentials) => {\r\n    return (dispatch, getState, {getFirebase}) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        ).then(() => {\r\n            dispatch( { type: 'LOGIN_AUTHENTICATED'});\r\n        }).catch((err) => {\r\n            dispatch( { type: 'LOGIN_ERROR', err });\r\n        });\r\n    }\r\n}\r\n\r\nexport const signOut = () => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch({ type: 'SIGNOUT_SUCCESS' });\r\n        });\r\n    }\r\n}\r\n\r\nexport const signUp = (newUser) => {\r\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n            // The following lines below creates the newUser Record.\r\n        ).then((resp) => {\r\n            // response.user.uid will get the data from the newUser and storing it in this document thus returning a promise based upon Lines 37-39\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                firstName: newUser.firstName,\r\n                lastName: newUser.lastName,\r\n                initials: newUser.firstName[0] + newUser.lastName[0]\r\n            })\r\n        }).then(() => {\r\n            dispatch({ type: 'SIGNUP_SUCCESS' })\r\n        }).catch(err => {\r\n            dispatch ({ type: 'SIGNUP_ERROR', err })\r\n        })\r\n    }\r\n}","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst SignedOutLinks = () => {\r\n    return (\r\n        <ul className=\"right\">\r\n            <li><NavLink to='/signup'>Sign Up</NavLink></li>\r\n            <li><NavLink to='/signin'>Login</NavLink></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SignedOutLinks;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport SignedInLinks from './SignedInLinks'\r\nimport SignedOutLinks from './SignedOutLinks'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Navbar = (props) => {\r\n    const { auth, profile } = props;\r\n    //console.log(auth);\r\n    const links = auth.uid ? <SignedInLinks profile={profile}/> : <SignedOutLinks />;\r\n    return (\r\n        <nav className=\"nav-wrapper cyan accent-4\">\r\n            <div className=\"container\">\r\n                <Link to = '/' className =\"brand-logo\">Planr</Link>\r\n                { auth.isLoaded && links }\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    // Testing functionality:\r\n    console.log(state);\r\n    return {\r\n        auth: state.firebase.auth,\r\n        profile: state.firebase.profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar);","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst Notifications = (props) => {\r\n    const {notifications} = props;\r\n    return (\r\n        <div className=\"section\">\r\n            <div className=\"card z-depth-0\">\r\n                <div className=\"card-content\">\r\n                    <span className=\"card-title\">Notifications</span>\r\n                        <ul className=\"notifications\">\r\n                            { notifications && notifications.map(item => {\r\n                                return (\r\n                                    <li key={item.id}>\r\n                                        <span className=\"black-text\">{item.user}  </span>\r\n                                        <span>{item.content}</span>\r\n                                        <div className=\"grey-text note-date\">\r\n                                            {moment(item.time.toDate()).fromNow()}\r\n                                        </div>\r\n                                    </li>\r\n                                )\r\n                            })}\r\n                        </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notifications;","// Functional Component\r\nimport React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst ProjectSummary = ({project}) => {\r\n    return(\r\n\r\n        <div className=\"card z-depth-0 project-summary\">\r\n            <div className=\"card-content grey-text text-darken-3\">\r\n                <span className=\"card-title\">{project.title}</span>\r\n                <p>Posted by {project.authorFirstName} {project.authorLastName}</p>\r\n                <p className=\"grey-text\">{(project.createdAt.toDate().toDateString())}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectSummary;","// Functional component\r\nimport React from 'react'\r\n// Utilizing this functional component makes this portion a lot more modular rather than having to re-write the code.\r\nimport ProjectSummary from './ProjectSummary'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst ProjectList = ({projects}) => {\r\n    return (\r\n        <div className=\"project-list section\">\r\n            { projects && projects.map(project => {\r\n                return (\r\n                    <Link to = { '/project/' + project.id } >\r\n                        <ProjectSummary project={project} key={project.id} />\r\n                    </Link>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectList;","// This will be a class-based component\r\nimport React, { Component } from 'react'\r\nimport Notifications from './Notifications'\r\nimport ProjectList from '../projects/ProjectList'\r\n// This line of code is the glue that connects Redux to React\r\nimport { connect } from 'react-redux'\r\n// Firestore is now binding to React. This is a higher-order component that is binded to a Firestore component\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass Dashboard extends Component {\r\n    render(){\r\n        // console.log(this.props);\r\n        const { projects, auth, notifications } = this.props;\r\n\r\n        if (!auth.uid) return <Redirect to ='/signin' />\r\n\r\n        return (\r\n            <div className=\"dashboard container\">\r\n                <div className=\"row\">\r\n                    {/* 12 columns on small screens and on medium size screens exhibit 6 columns  */}\r\n                    <div className=\"col s12 m6\">\r\n                        <ProjectList projects={projects} />\r\n                    </div>\r\n                    <div className=\"col s12 m5 offset-m1\">\r\n                        <Notifications notifications={notifications}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(state);\r\n    return {\r\n        projects: state.firestore.ordered.projects,\r\n        auth: state.firebase.auth,\r\n        notifications: state.firestore.ordered.notifications\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n        // Here in these lines of codes we can modify the props to make the front-end UI structured in a way where the projects and notifications are presented in accordance to the time it was published.\r\n        firestoreConnect([\r\n            { collection: 'projects', orderBy: ['createdAt', 'desc']},\r\n            { collection: 'notifications', limit: 3, orderBy: ['time', 'desc']}\r\n        ])\r\n    )(Dashboard);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nfunction ProjectDetails(props) {\r\n    // This is implementation of a Route-Guard. So if the user is not signed in and wants to go to Create-Project, it will be routed back to Sign-In.\r\n    const { project, auth } = props;\r\n    if (!auth.uid) return <Redirect to ='/signin' />\r\n\r\n    if (project) {\r\n        return (\r\n            <div className=\"container section project-details\">\r\n                <div className=\"card z-depth-0\">\r\n                    <div className=\"card content\">\r\n                        <span className=\"card-title\">{ project.title }</span>\r\n                        <p>{ project.content }</p>\r\n                    </div>\r\n                <div className=\"card-action grey-lighten-4 grey-text\">\r\n                    <div>Posted by { project.authorFirstName } { project.authorLastName } </div>\r\n                    <div>22nd March, 1530</div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"container center\">\r\n                <p style= {{ color: 'white' }}>Please wait. Loading Project.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    // console.log(state);\r\n    const id = ownProps.match.params.id;\r\n    const projects = state.firestore.data.projects;\r\n    const project = projects ? projects[id] : null\r\n    return {\r\n        project: project,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        { collection: 'projects'}\r\n    ])\r\n)(ProjectDetails)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { signIn } from '../../store/actions/authActions'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass SignedIn extends Component {\r\n    state = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        // preventDefault prevents the default action of the form page to refresh when the user clicks the submit button\r\n        e.preventDefault();\r\n        this.props.signIn(this.state);\r\n        // console.log(this.state);\r\n    }\r\n    render() {\r\n        const { authError, auth } = this.props;\r\n        if (auth.uid) return <Redirect to ='/' />\r\n        return (\r\n            <div className = \"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-daren-3\">Login</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn deep-orange lighten-2 z-depth-0\">Login</button>\r\n                        <div className=\"red-text center\">\r\n                            { authError ? <p>{authError}</p> : null }\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        authError: state.auth.authError,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signIn: (creds) => dispatch(signIn(creds))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignedIn);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { signUp } from '../../store/actions/authActions'\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        // preventDefault prevents the default action of the form page to refresh when the user clicks the submit button\r\n        e.preventDefault();\r\n        this.props.signUp(this.state)\r\n        // console.log(this.state);\r\n    }\r\n    render() {\r\n        const { auth, authError } = this.props;\r\n        if (auth.uid) return <Redirect to ='/' />\r\n\r\n        return (\r\n            <div className = \"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-daren-3\">Sign Up</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input type=\"text\" id=\"firstName\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input type=\"text\" id=\"lastName\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn deep-orange lighten-2 z-depth-0\">Sign Up</button>\r\n                        <div className=\"red-text center\">\r\n                            { authError ? <p>{ authError} </p> : null }\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signUp: (newUser) => dispatch(signUp(newUser))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { createProject } from '../../store/actions/projectActions'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass CreateProject extends Component {\r\n    state = {\r\n        title: '',\r\n        content: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            // This is grabbing the id of the targeted element\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        // preventDefault prevents the default action of the form page to refresh when the user clicks the submit button\r\n        e.preventDefault();\r\n        this.props.createProject(this.state)\r\n        this.props.history.push('/');\r\n        // Testing Functionality: console.log(this.state);\r\n    }\r\n    render() {\r\n        // This is implementation of a Route-Guard. So if the user is not signed in and wants to go to Create-Project, it will be routed back to Sign-In.\r\n        const { auth } = this.props;\r\n        if (!auth.uid) return <Redirect to ='/signin' />\r\n        return (\r\n            <div className = \"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-daren-3\">Create Project</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"title\">Title</label>\r\n                        <input type=\"text\" id=\"title\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Project Content</label>\r\n                        <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn deep-orange lighten-2 z-depth-0\">Create Project</button>\r\n                        {/* When the user presses the button this line of code will trigger the handleSubmit function which prevents the page from reloading */}\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        /* This line of code will run the function: project taking in that particular 'project data' and perform a dispatch\r\n        and call the action creator: createProject and that will return the asynchronous function call from the projectActions.js file where then we can carry on with the dispatch of the action.\r\n        */\r\n        createProject: (project) => dispatch(createProject(project))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject);","// This file is meant to add/delete/modify a project\r\n\r\nexport const createProject = (project) => {\r\n    // dispatch is a function that dispatches an action to the reducer\r\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n        // Make an asynchronous call to Firestore database and pause dispatch\r\n        const firestore = getFirestore();\r\n        const profile = getState().firebase.profile;\r\n        const authorId = getState().firebase.auth.uid;\r\n        firestore.collection('projects').add({\r\n            ...project,\r\n            authorFirstName: profile.firstName,\r\n            authorLastName: profile.lastName,\r\n            authorId: authorId,\r\n            createdAt: new Date()\r\n        }).then(() => {\r\n            dispatch({ type: 'CREATE_PROJECT', project });\r\n        }).catch((err) => {\r\n            dispatch({ type: 'CREATE_PROJECT_ERROR', err });\r\n        })\r\n    }\r\n};","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Navbar from './components/layout/Navbar'\nimport Dashboard from './components/dashboard/Dashboard'\nimport ProjectDetails from './components/projects/ProjectDetails'\nimport SignIn from './components/auth/SignIn'\nimport SignUp from './components/auth/SignUp'\nimport CreateProject from './components/projects/CreateProject'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          {/* Route exact path will only load the page with that particular \"exact path\" */}\n          <Route exact path='/' component={Dashboard} />\n          <Route path='/project/:id' component={ProjectDetails} />\n          <Route path='/signin' component={SignIn} />\n          <Route path='/signup' component={SignUp} />\n          <Route path='/create' component={CreateProject} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState =  {\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n        case 'LOGIN_ERROR':\r\n            console.log('login error')\r\n            return {\r\n                ...state,\r\n                authError: 'Login failed'\r\n            }\r\n        case 'LOGIN_AUTHENTICATED':\r\n            console.log('login success')\r\n        return {\r\n            ...state,\r\n            authError: null\r\n        }\r\n        case 'SIGNOUT_SUCCESS':\r\n            console.log('signout success');\r\n            return state;\r\n        case 'SIGNUP_SUCCESS':\r\n            console.log('signup success');\r\n            return {\r\n                ...state,\r\n                authError: null\r\n            }\r\n        case 'SIGNUP_ERROR':\r\n            console.log('signup error');\r\n            return {\r\n                ...state,\r\n                authError: action.err.message\r\n            }\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","const initState =  {\r\n    projects: [\r\n        {id: '1', title: 'Modify PM Application', content: 'lorem ipsum'},\r\n        {id: '2', title: 'Fix Serial Key Generator Application', content: 'lorem ipsum'},\r\n        {id: '3', title: 'Implement changes to web Application', content: 'lorem ipsum'},\r\n    ]\r\n}\r\n\r\nconst projectReducer = (state = initState, action) => {\r\n    // an if statement can be implemented to call upon the  CREATE_PROJECT but in this case we can use a switch/case statement\r\n    switch (action.type) {\r\n        case 'CREATE_PROJECT':\r\n            console.log('created project', action.project);\r\n            return state;\r\n\r\n        case 'CREATE_PROJECT_ERROR':\r\n            console.log('create project error', action.err)\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default projectReducer;","import authReducer from './authReducer'\r\nimport projectReducer from './projectReducer'\r\nimport { combineReducers } from 'redux'\r\n// This is a pre-made reducer that synchronizes our firestore data with our state in the background. It understands and is able to read the firebase data, because of the file: fbConfig.js\r\nimport { firestoreReducer } from 'redux-firestore'\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\n\r\nconst rootReducer = combineReducers({\r\n    // authReducer will update any data on the auth property\r\n    auth: authReducer,\r\n    // projectReducer will update any data on the project property inside the state project\r\n    project: projectReducer,\r\n    firestore: firestoreReducer,\r\n    // This firebaseReducer will synchronize with our off status on firebase with our redux app in the state and display it on this firebase object on this state.\r\n    firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","// Initialize Firebase\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDHG6ypGqcWqthsf0Rwa-MxoQ1nJGPJOSk\",\r\n    authDomain: \"planr-eade0.firebaseapp.com\",\r\n    databaseURL: \"https://planr-eade0.firebaseio.com\",\r\n    projectId: \"planr-eade0\",\r\n    storageBucket: \"planr-eade0.appspot.com\",\r\n    messagingSenderId: \"592519179806\",\r\n    appId: \"1:592519179806:web:7c6e22ff049bc3a12cc80f\",\r\n    measurementId: \"G-RHQB40EZDM\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.firestore().settings({ timestampsInSnapshots: true });\r\n\r\n\r\nexport default firebase;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport rootReducer from './store/reducers/rootReducer'\r\nimport { Provider, useSelector } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport { reduxFirestore, getFirestore, createFirestoreInstance } from 'redux-firestore'\r\nimport { ReactReduxFirebaseProvider, getFirebase, isLoaded } from 'react-redux-firebase'\r\nimport fbConfig from './config/fbConfig'\r\nimport firebase from 'firebase/app'\r\n\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(\r\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\r\n        reduxFirestore(firebase, fbConfig),\r\n    )\r\n);\r\n\r\nconst rrfConfig = {\r\n    userProfile: 'users',\r\n    useFirestoreForProfile: true\r\n}\r\n\r\nconst rrfProps = {\r\n    firebase,\r\n    config: rrfConfig,\r\n    dispatch: store.dispatch,\r\n    createFirestoreInstance,\r\n    presence: 'presence',\r\n    sessions: 'sessions'\r\n}\r\n\r\nfunction AuthIsLoaded({ children }) {\r\n    const auth = useSelector(state => state.firebase.auth)\r\n    if (!isLoaded(auth)) return <div>Loading Screen...</div>;\r\n    return children\r\n}\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ReactReduxFirebaseProvider { ...rrfProps }>\r\n            <AuthIsLoaded>\r\n                <App />\r\n            </AuthIsLoaded>\r\n        </ReactReduxFirebaseProvider>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}